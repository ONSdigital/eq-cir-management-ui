[tool.poetry]
name = "eq-cir-management-ui"
version = "0.1.0"
description = "eq-cir-management-ui"
authors = ["ONSdigital"]
license = "MIT"
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.12"
flask = "^3.1.0"
structlog = "^25.3.0"
flask-talisman = "^1.1.0"
semver = "^3.0.4"
gunicorn = "^23.0.0"
python-dotenv = "^1.1.1"

[tool.poetry.group.dev.dependencies]
# :TODO: Remove pylint when ruff supports all pylint rules
# :TODO: Remove black when ruff supports all black rules
pylint = "^3.3.6"
black = "^25.1.0"
pytest = "^8.3.5"
pytest-xdist = "^3.8.0"
ruff = "^0.12.1"
pytest-cov = "^6.1.1"
mypy = "^1.15.0"

[tool.black]
line-length = 120

[tool.ruff]
line-length = 120
indent-width = 4

[tool.ruff.lint]
extend-select = [
    "E4", "E7", "E9", "E5", # On top of the defaults (`E4`, E7`, `E9`, and `F`), enable E5 (Adds line length check - error "E501")
    "Q",  # flake8-quotes (Q)
    "B", # flake8-bugbear (B)
    "A", # flake8-builtins (A)
    "C4", # flake8-comprehensions (C4)
    "PIE", # flake8-pie (PIE)
    "SLF", # flake8-self (SLF)
    "ARG", # flake8-unused-arguments (ARG)
    "YTT", # flake8-2020 (YTT)
    "C", # flake8-comprehensions (C)
    "DTZ", # flake8-datetimez (DTZ)
    "S", # flake8-bandit (S)
    "TID", # flake8-tidy-imports (TID)
    "ICN", # flake8-import-conventions (ICN)
    "ISC", # flake8-implicit-str-concat (ISC)
    "COM", # flake8-commas (COM)
    "LOG", # flake8-logging (LOG)
    "G", # flake8-logging-format (G)
    "EM", # flake8-errmsg (EM)
    "FBT", # flake8-boolean-trap (FBT)
    "TD", # flake8-todo (TD)
    "FA", # flake8-future-annotations (FA)
    "T20", # flake8-print (T20)
    "RET", # flake8-return (RET)
    "E", # pycodestyle Error (E)
    "W", # pycodestyle Warning (W)
    "F", # pyflakes (F)
    "I", # isort (I)
    "N", # pep8-naming (N)
    "RUF", # Ruff-specific rules (RUF)
    "UP", # pyupgrade (UP)
    "ERA", # eradicate (ERA)
    "FURB", # refurb (FURB)
    "TRY", # tryceratops (TRY)
    "FLY", # flynt (FLY)
    "PERF", # Perflint (PERF)
    "SIM", # flake8-simplify
    "D",      # pydocstyle - Enforce existing docstrings only
    "C90",    # mccabe
]

ignore = [
    # Conflicts with google docstring style
    "D205",
    # Allow missing docstring, remove to enforce docstrings across the board
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107",
    # Disable line length check as it is handled by black
    # :TODO: Remove E501 when ruff supports all black rules
    "E501",
    # indentation contains tabs
    "W191",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    # Allow use of assert statements in tests
    "S101",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.mypy]
# Global mypy options
no_implicit_optional = "True"
ignore_missing_imports = "True"
warn_unused_configs = "True"
warn_no_return = "False"
warn_unused_ignores = "True"
warn_return_any = "True"
warn_redundant_casts = "True"
disallow_untyped_defs = "True"
disallow_untyped_calls = "True"
disallow_incomplete_defs = "True"
strict_equality = "True"
